---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zookeeper-data
  name: zookeeper-data
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zookeeper-txns
  name: zookeeper-txns
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zookeeper-logs
  name: zookeeper-logs
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: zookeeper-conf
  name: zookeeper-conf
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: kafka-data
  name: kafka-data
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: kafka-logs
  name: kafka-logs
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: kafka-config
  name: kafka-config
  namespace: kafka-connect
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: rook-cephfs
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: zookeeper
    component: zookeeper
  name: zookeeper
  namespace: kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
      component: zookeeper
  strategy: {}
  template:
    metadata:
      labels:
        app: zookeeper
        component: zookeeper
    spec:
      nodeSelector:
        tier: broker
      containers:
      - image: debezium/zookeeper:1.2
        imagePullPolicy: IfNotPresent
        name: zookeeper
        command: 
        - /bin/sh
        args:
        - -c
        - rm -f $ZK_HOME/conf/zoo.cfg && /docker-entrypoint.sh start
        env:
        - name: SERVER_ID
          value: "1"
        - name: SERVER_COUNT
          value: "1"
        - name: LOG_LEVEL
          value: "INFO"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        resources:
          requests:
            memory: "2Gi"
          limits:
            memory: "4Gi"
        volumeMounts:
        - mountPath: /zookeeper/data
          name: zookeeper-data
        - mountPath: /zookeeper/txns
          name: zookeeper-txns
        - mountPath: /zookeeper/conf
          name: zookeeper-conf
      volumes:
      - name: zookeeper-data
        persistentVolumeClaim:
          claimName: zookeeper-data
      - name: zookeeper-txns
        persistentVolumeClaim:
          claimName: zookeeper-txns
      - name: zookeeper-conf
        persistentVolumeClaim:
          claimName: zookeeper-conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kafka
    component: kafka
  name: kafka
  namespace: kafka-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
      component: kafka
  strategy: {}
  template:
    metadata:
      labels:
        app: kafka
        component: kafka
    spec:
      nodeSelector:
        tier: broker
      containers:
      - image: debezium/kafka:1.2
        imagePullPolicy: IfNotPresent
        name: kafka
        env:
        - name: BROKER_ID
          value: "1"
        - name: ZOOKEEPER_CONNECT
          value: "zookeeper:2181"
        - name: HOST_NAME
          value: "kafka"
        - name: LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: HEAP_OPTS
          value: "-Xms1G -Xmx4G"
        - name: CREATE_TOPICS
          value: "connect-configs:1:1:compact,connect-offsets:1:1:compact,connect-status:1:1:compact"
        - name: LOG_LEVEL
          value: "INFO"
        - name: KAFKA_HOST_NAME
          value: "kafka"
        - name: KAFKA_PORT
          value: "9092"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "PLAINTEXT:PLAINTEXT"
        - name: KAFKA_ADVERTISED_HOST_NAME
          value: "kafka"
        - name: KAFKA_ADVERTISED_PORT
          value: "9092"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka:9092"
        - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "2"
        - name: KAFKA_LOG_COMPRESSION_TYPE
          value: "gzip"
        ports:
        - containerPort: 9092
        resources:
          requests:
            memory: "2Gi"
          limits:
            memory: "4Gi"
        volumeMounts:
        - mountPath: /kafka/data
          name: kafka-data
        - mountPath: /kafka/logs
          name: kafka-logs
        - mountPath: /kafka/config
          name: kafka-config
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: kafka-data
      - name: kafka-logs
        persistentVolumeClaim:
          claimName: kafka-logs
      - name: kafka-config
        persistentVolumeClaim:
          claimName: kafka-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka
  name: kafka
  namespace: kafka-connect
spec:
  ports:
  - name: broker
    port: 9092
    protocol: TCP
    targetPort: 9092
  selector:
    component: kafka
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    component: zookeeper
  name: zookeeper
  namespace: kafka-connect
spec:
  ports:
  - name: client
    port: 2181
    protocol: TCP
    targetPort: 2181
  - name: server
    port: 2888
    protocol: TCP
    targetPort: 2888
  - name: leader-election
    port: 3888
    protocol: TCP
    targetPort: 3888
  selector:
    component: zookeeper
  type: ClusterIP
